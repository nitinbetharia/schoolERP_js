const { dbManager } = require('./database');
const { defineTrustModel } = require('./Trust');
const { defineSystemUserModel, defineSystemAuditLogModel } = require('./SystemUser');
const { defineSetupConfiguration } = require('../modules/setup/models/SetupConfiguration');
const { defineUserProfile } = require('../modules/user/models/UserProfile');
const { defineSchool } = require('../modules/school/models/School');
const { defineClass } = require('../modules/school/models/Class');
const { defineSection } = require('../modules/school/models/Section');
const { defineBoardCompliance } = require('../modules/school/models/BoardCompliance');
const { defineCBSECompliance } = require('../modules/school/models/CBSECompliance');
const { defineCISCECompliance } = require('../modules/school/models/CISCECompliance');
const { defineStateBoardCompliance } = require('../modules/school/models/StateBoardCompliance');
const { defineInternationalBoardCompliance } = require('../modules/school/models/InternationalBoardCompliance');
const { defineNEPCompliance } = require('../modules/school/models/NEPCompliance');
const { defineUDISESchool } = require('../modules/school/models/UDISESchool');
const { defineUDISEClassInfrastructure } = require('../modules/school/models/UDISEClassInfrastructure');
const { defineUDISEFacilities } = require('../modules/school/models/UDISEFacilities');
const { defineUDISEStudent } = require('../modules/school/models/UDISEStudent');
const { defineStudent } = require('./Student');
const { defineAcademicYear } = require('./AcademicYear');
const { defineStudentEnrollment } = require('./StudentEnrollment');
const { defineStudentDocument } = require('./StudentDocument');
const { logger, logSystem, logError } = require('../utils/logger');

/**
 * Model registry for system and tenant databases
 * Manages model definitions and associations
 */
function createModelRegistry() {

   this.systemModels = {

   /**
    * initializeSystemModels method
    */
   async function initializeSystemModels() {

      try {
      if (this.initialized) {
      return this.systemModels;
         
   }

   /**
    * if method
    */
   async function if() {

      await systemDB.sync({ alter: true
   }

   /**
    * catch method
    */
   async function catch() {

      logError(error, { context: 'initializeSystemModels'
   }

   /**
    * setupSystemAssociations method
    */
   async function setupSystemAssociations() {

      const { Trust, SystemUser, SystemAuditLog
   }

   /**
    * if method
    */
   async function if() {

      SystemUser.associate(this.systemModels);
      
   }

   /**
    * if method
    */
   async function if() {

      SystemAuditLog.associate(this.systemModels);
      
   }

   /**
    * getSystemModels method
    */
   async function getSystemModels() {

      if (!this.initialized) {
      throw new Error('System models not initialized');
      
   }

   /**
    * initializeTenantModels method
    */
   async function initializeTenantModels() {

      try {
      logSystem(`Initializing tenant models for: ${tenantCode
   }

   /**
    * if method
    */
   async function if() {

      await tenantDB.sync({ alter: true
   }

   /**
    * catch method
    */
   async function catch() {

      logError(error, { context: 'initializeTenantModels', tenantCode
   }

   /**
    * defineTenantUserModel method
    */
   async function defineTenantUserModel() {

      const { DataTypes
   }

   /**
    * defineTenantAuditLogModel method
    */
   async function defineTenantAuditLogModel() {

      const { DataTypes
   }

   /**
    * setupTenantAssociations method
    */
   async function setupTenantAssociations() {

      const {
      User,
      UserProfile,
      School,
      Class,
      Section,
      AcademicYear,
      Student,
      StudentEnrollment,
      StudentDocument,
      BoardCompliance,
      CBSECompliance,
      CISCECompliance,
      StateBoardCompliance,
      InternationalBoardCompliance,
      NEPCompliance,
      UDISESchool,
      UDISEClassInfrastructure,
      UDISEFacilities,
      UDISEStudent,
      AuditLog,
      
   }

   /**
    * getTenantModels method
    */
   async function getTenantModels() {

      if (!this.tenantModels.has(tenantCode)) {
      throw new Error(`Tenant models not initialized for: ${tenantCode
   }

   /**
    * healthCheck method
    */
   async function healthCheck() {

      const health = {
      systemModels: Object.keys(this.systemModels).length,
      tenantModels: this.tenantModels.size,
      initialized: this.initialized,
      activeTenants: Array.from(this.tenantModels.keys()),
      
   }

   return {
      initializeSystemModels,
      if,
      catch,
      setupSystemAssociations,
      if,
      if,
      getSystemModels,
      initializeTenantModels,
      if,
      catch,
      defineTenantUserModel,
      defineTenantAuditLogModel,
      setupTenantAssociations,
      getTenantModels,
      healthCheck
   };
}

// Create singleton instance
const modelRegistry = new ModelRegistry();

// Export convenience functions
module.exports = {
   ModelRegistry,
   modelRegistry,

   // System model getters
   getSystemModels: () => modelRegistry.getSystemModels(),
   getTrustModel: () => modelRegistry.getSystemModels().Trust,
   getSystemUserModel: () => modelRegistry.getSystemModels().SystemUser,
   getSystemAuditLogModel: () => modelRegistry.getSystemModels().SystemAuditLog,

   // Tenant model getters
   getTenantModels: (tenantCode) => modelRegistry.getTenantModels(tenantCode),

   // Initialize functions
   initializeSystemModels: () => modelRegistry.initializeSystemModels(),
   initializeTenantModels: (tenantCode) => modelRegistry.initializeTenantModels(tenantCode),
};
