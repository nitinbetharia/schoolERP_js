<!-- Students page uses layouts/main layout automatically -->

<!-- Students Management Page -->
<div class="page-container">
  <!-- Page Header -->
  <div class="page-header">
    <div class="flex items-center justify-between">
      <div>
        <h1 class="page-title">Student Management</h1>
        <p class="page-subtitle">Manage student admissions, profiles, and academic records</p>
      </div>
      <div class="flex items-center gap-3">
        <button class="btn btn-outline" onclick="bulkActions.show()">
          <i class="fas fa-tasks mr-2"></i>
          Bulk Actions
        </button>
        <a href="/students/create" class="btn btn-primary">
          <i class="fas fa-user-plus mr-2"></i>
          Add Student
        </a>
      </div>
    </div>
  </div>

  <!-- Quick Stats -->
  <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
    <div class="card">
      <div class="card-body">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-muted text-sm">Total Students</p>
            <p class="text-2xl font-bold text-primary" id="totalStudents">0</p>
          </div>
          <div class="p-3 bg-primary-50 rounded-lg">
            <i class="fas fa-users text-primary text-xl"></i>
          </div>
        </div>
      </div>
    </div>

    <div class="card">
      <div class="card-body">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-muted text-sm">Active Students</p>
            <p class="text-2xl font-bold text-success" id="activeStudents">0</p>
          </div>
          <div class="p-3 bg-success-50 rounded-lg">
            <i class="fas fa-user-check text-success text-xl"></i>
          </div>
        </div>
      </div>
    </div>

    <div class="card">
      <div class="card-body">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-muted text-sm">New Admissions</p>
            <p class="text-2xl font-bold text-info" id="newAdmissions">0</p>
          </div>
          <div class="p-3 bg-info-50 rounded-lg">
            <i class="fas fa-user-plus text-info text-xl"></i>
          </div>
        </div>
      </div>
    </div>

    <div class="card">
      <div class="card-body">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-muted text-sm">Pending Approvals</p>
            <p class="text-2xl font-bold text-warning" id="pendingApprovals">0</p>
          </div>
          <div class="p-3 bg-warning-50 rounded-lg">
            <i class="fas fa-clock text-warning text-xl"></i>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Filters and Search -->
  <div class="card mb-6">
    <div class="card-body">
      <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
        <div class="form-group">
          <label class="form-label">Search</label>
          <div class="relative">
            <input type="text" id="searchInput" class="form-input pl-10" 
                   placeholder="Search students...">
            <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-muted"></i>
          </div>
        </div>

        <div class="form-group">
          <label class="form-label">Class</label>
          <select id="classFilter" class="form-select">
            <option value="">All Classes</option>
            <!-- Classes will be populated by JavaScript -->
          </select>
        </div>

        <div class="form-group">
          <label class="form-label">Section</label>
          <select id="sectionFilter" class="form-select">
            <option value="">All Sections</option>
            <!-- Sections will be populated by JavaScript -->
          </select>
        </div>

        <div class="form-group">
          <label class="form-label">Status</label>
          <select id="statusFilter" class="form-select">
            <option value="">All Status</option>
            <option value="ACTIVE">Active</option>
            <option value="INACTIVE">Inactive</option>
            <option value="TRANSFERRED">Transferred</option>
            <option value="DROPPED">Dropped</option>
            <option value="GRADUATED">Graduated</option>
          </select>
        </div>

        <div class="form-group">
          <label class="form-label">Academic Year</label>
          <select id="academicYearFilter" class="form-select">
            <option value="">Current Year</option>
            <!-- Academic years will be populated by JavaScript -->
          </select>
        </div>
      </div>
      
      <div class="flex items-center justify-between mt-4">
        <button class="btn btn-secondary btn-sm" onclick="resetFilters()">
          <i class="fas fa-undo mr-2"></i>
          Reset Filters
        </button>
        
        <div class="flex items-center gap-3">
          <button class="btn btn-outline btn-sm" onclick="exportStudents()">
            <i class="fas fa-download mr-2"></i>
            Export
          </button>
          <button class="btn btn-outline btn-sm" onclick="printStudents()">
            <i class="fas fa-print mr-2"></i>
            Print
          </button>
          <button class="btn btn-outline btn-sm" onclick="generateIdCards()">
            <i class="fas fa-id-card mr-2"></i>
            ID Cards
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Students Table -->
  <div class="card">
    <div class="card-header">
      <div class="flex items-center justify-between">
        <h3 class="font-semibold">Students List</h3>
        <div class="flex items-center gap-3">
          <div class="flex items-center gap-2">
            <button class="btn btn-ghost btn-sm" onclick="toggleView('grid')" id="gridViewBtn">
              <i class="fas fa-th"></i>
            </button>
            <button class="btn btn-ghost btn-sm active" onclick="toggleView('table')" id="tableViewBtn">
              <i class="fas fa-list"></i>
            </button>
          </div>
          <span class="text-sm text-muted">
            Showing <span id="showingCount">0</span> of <span id="totalCount">0</span> students
          </span>
          <div class="bulk-select-info hidden">
            <span class="bg-primary-50 text-primary px-3 py-1 rounded-lg text-sm">
              <span id="selectedCount">0</span> students selected
            </span>
          </div>
        </div>
      </div>
    </div>
    <div class="card-body p-0">
      <!-- Table View -->
      <div id="tableView" class="table-responsive">
        <table class="table" id="studentsTable">
          <thead>
            <tr>
              <th class="w-12">
                <input type="checkbox" id="selectAll" class="form-checkbox">
              </th>
              <th class="sortable" data-sort="admission_number">
                Admission No.
                <i class="fas fa-sort ml-1"></i>
              </th>
              <th class="sortable" data-sort="full_name">
                Student Name
                <i class="fas fa-sort ml-1"></i>
              </th>
              <th class="sortable" data-sort="class_name">
                Class & Section
                <i class="fas fa-sort ml-1"></i>
              </th>
              <th class="sortable" data-sort="parent_name">
                Parent/Guardian
                <i class="fas fa-sort ml-1"></i>
              </th>
              <th class="sortable" data-sort="contact_number">
                Contact
                <i class="fas fa-sort ml-1"></i>
              </th>
              <th class="sortable" data-sort="status">
                Status
                <i class="fas fa-sort ml-1"></i>
              </th>
              <th class="w-32">Actions</th>
            </tr>
          </thead>
          <tbody id="studentsTableBody">
            <!-- Students will be populated by JavaScript -->
          </tbody>
        </table>
      </div>

      <!-- Grid View -->
      <div id="gridView" class="hidden p-6">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6" id="studentsGrid">
          <!-- Student cards will be populated by JavaScript -->
        </div>
      </div>
    </div>
  </div>

  <!-- Pagination -->
  <div class="flex items-center justify-between mt-6">
    <div class="flex items-center gap-2">
      <span class="text-sm text-muted">Show</span>
      <select id="pageSize" class="form-select form-select-sm">
        <option value="10">10</option>
        <option value="25" selected>25</option>
        <option value="50">50</option>
        <option value="100">100</option>
      </select>
      <span class="text-sm text-muted">per page</span>
    </div>
    
    <div class="pagination" id="pagination">
      <!-- Pagination will be generated by JavaScript -->
    </div>
  </div>
</div>

<!-- Student Quick Actions Modal -->
<div id="studentActionsModal" class="modal">
  <div class="modal-overlay"></div>
  <div class="modal-container max-w-md">
    <div class="modal-header">
      <h3 class="modal-title">Student Actions</h3>
      <button type="button" class="modal-close">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <div class="modal-body">
      <div class="space-y-3" id="studentActionsList">
        <!-- Actions will be populated dynamically -->
      </div>
    </div>
  </div>
</div>

<!-- Bulk Actions Modal -->
<div id="bulkActionsModal" class="modal">
  <div class="modal-overlay"></div>
  <div class="modal-container max-w-md">
    <div class="modal-header">
      <h3 class="modal-title">Bulk Actions</h3>
      <button type="button" class="modal-close">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <div class="modal-body">
      <div class="space-y-3">
        <button class="btn btn-outline w-full justify-start" onclick="bulkActions.promote()">
          <i class="fas fa-arrow-up mr-3 text-success"></i>
          Promote Selected Students
        </button>
        <button class="btn btn-outline w-full justify-start" onclick="bulkActions.changeSection()">
          <i class="fas fa-exchange-alt mr-3 text-info"></i>
          Change Section
        </button>
        <button class="btn btn-outline w-full justify-start" onclick="bulkActions.generateIdCards()">
          <i class="fas fa-id-card mr-3 text-primary"></i>
          Generate ID Cards
        </button>
        <button class="btn btn-outline w-full justify-start" onclick="bulkActions.sendNotification()">
          <i class="fas fa-bell mr-3 text-info"></i>
          Send Notification
        </button>
        <button class="btn btn-outline w-full justify-start" onclick="bulkActions.export()">
          <i class="fas fa-download mr-3 text-primary"></i>
          Export Selected Students
        </button>
        <button class="btn btn-outline w-full justify-start text-warning" onclick="bulkActions.markInactive()">
          <i class="fas fa-user-slash mr-3"></i>
          Mark as Inactive
        </button>
      </div>
    </div>
  </div>
</div>

<script>
/**
 * Students Management JavaScript
 */
class StudentsManager {
    constructor() {
        this.students = [];
        this.filteredStudents = [];
        this.currentPage = 1;
        this.pageSize = 25;
        this.sortField = 'full_name';
        this.sortDirection = 'asc';
        this.selectedStudents = new Set();
        this.currentView = 'table';
        this.classes = [];
        this.sections = [];
        this.init();
    }

    async init() {
        await this.loadData();
        this.setupEventListeners();
        this.renderStudents();
        this.updateStats();
    }

    async loadData() {
        try {
            const [studentsResponse, classesResponse] = await Promise.all([
                api.get('/api/students'),
                api.get('/api/classes')
            ]);

            if (studentsResponse.success) {
                this.students = studentsResponse.data;
                this.filteredStudents = [...this.students];
            }

            if (classesResponse.success) {
                this.classes = classesResponse.data;
                this.populateClassFilter();
            }
        } catch (error) {
            notifications.error('Load Failed', 'Failed to load students data');
        }
    }

    populateClassFilter() {
        const classFilter = document.getElementById('classFilter');
        classFilter.innerHTML = '<option value="">All Classes</option>';
        
        this.classes.forEach(cls => {
            const option = document.createElement('option');
            option.value = cls.id;
            option.textContent = cls.class_name;
            classFilter.appendChild(option);
        });
    }

    setupEventListeners() {
        // Search and filters
        document.getElementById('searchInput').addEventListener('input', 
            utils.debounce(() => this.applyFilters(), 300));
        document.getElementById('classFilter').addEventListener('change', () => {
            this.loadSections();
            this.applyFilters();
        });
        document.getElementById('sectionFilter').addEventListener('change', () => this.applyFilters());
        document.getElementById('statusFilter').addEventListener('change', () => this.applyFilters());
        document.getElementById('academicYearFilter').addEventListener('change', () => this.applyFilters());
        
        // Page size
        document.getElementById('pageSize').addEventListener('change', (e) => {
            this.pageSize = parseInt(e.target.value);
            this.currentPage = 1;
            this.renderStudents();
        });

        // Select all checkbox
        document.getElementById('selectAll').addEventListener('change', (e) => {
            this.toggleSelectAll(e.target.checked);
        });

        // Table sorting
        document.querySelectorAll('.sortable').forEach(header => {
            header.addEventListener('click', () => {
                const field = header.getAttribute('data-sort');
                this.sort(field);
            });
        });

        // Modal event listeners
        this.setupModalEventListeners();
    }

    setupModalEventListeners() {
        document.querySelectorAll('.modal-overlay, .modal-close').forEach(element => {
            element.addEventListener('click', () => {
                element.closest('.modal').classList.remove('active');
            });
        });
    }

    async loadSections() {
        const classId = document.getElementById('classFilter').value;
        const sectionFilter = document.getElementById('sectionFilter');
        
        sectionFilter.innerHTML = '<option value="">All Sections</option>';
        
        if (classId) {
            try {
                const response = await api.get(`/api/classes/${classId}/sections`);
                if (response.success) {
                    response.data.forEach(section => {
                        const option = document.createElement('option');
                        option.value = section.id;
                        option.textContent = section.section_name;
                        sectionFilter.appendChild(option);
                    });
                }
            } catch (error) {
                console.warn('Failed to load sections');
            }
        }
    }

    applyFilters() {
        const search = document.getElementById('searchInput').value.toLowerCase();
        const classId = document.getElementById('classFilter').value;
        const sectionId = document.getElementById('sectionFilter').value;
        const status = document.getElementById('statusFilter').value;

        this.filteredStudents = this.students.filter(student => {
            const matchesSearch = !search || 
                student.full_name.toLowerCase().includes(search) ||
                student.admission_number?.toLowerCase().includes(search) ||
                student.parent_name?.toLowerCase().includes(search);
            
            const matchesClass = !classId || student.class_id === parseInt(classId);
            const matchesSection = !sectionId || student.section_id === parseInt(sectionId);
            const matchesStatus = !status || student.status === status;

            return matchesSearch && matchesClass && matchesSection && matchesStatus;
        });

        this.currentPage = 1;
        this.renderStudents();
        this.updateStats();
    }

    sort(field) {
        if (this.sortField === field) {
            this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';
        } else {
            this.sortField = field;
            this.sortDirection = 'asc';
        }

        this.filteredStudents.sort((a, b) => {
            let aVal = a[field] || '';
            let bVal = b[field] || '';

            if (typeof aVal === 'string') {
                aVal = aVal.toLowerCase();
                bVal = bVal.toLowerCase();
            }

            if (this.sortDirection === 'asc') {
                return aVal < bVal ? -1 : aVal > bVal ? 1 : 0;
            } else {
                return aVal > bVal ? -1 : aVal < bVal ? 1 : 0;
            }
        });

        this.updateSortIndicators();
        this.renderStudents();
    }

    updateSortIndicators() {
        document.querySelectorAll('.sortable i').forEach(icon => {
            icon.className = 'fas fa-sort ml-1';
        });

        const activeHeader = document.querySelector(`[data-sort="${this.sortField}"]`);
        if (activeHeader) {
            const icon = activeHeader.querySelector('i');
            icon.className = `fas fa-sort-${this.sortDirection === 'asc' ? 'up' : 'down'} ml-1`;
        }
    }

    toggleView(view) {
        this.currentView = view;
        
        // Update button states
        document.getElementById('gridViewBtn').classList.toggle('active', view === 'grid');
        document.getElementById('tableViewBtn').classList.toggle('active', view === 'table');
        
        // Show/hide views
        document.getElementById('tableView').classList.toggle('hidden', view !== 'table');
        document.getElementById('gridView').classList.toggle('hidden', view !== 'grid');
        
        this.renderStudents();
    }

    renderStudents() {
        const startIndex = (this.currentPage - 1) * this.pageSize;
        const endIndex = startIndex + this.pageSize;
        const paginatedStudents = this.filteredStudents.slice(startIndex, endIndex);

        if (this.currentView === 'table') {
            this.renderTableView(paginatedStudents);
        } else {
            this.renderGridView(paginatedStudents);
        }

        this.updateCounts();
        this.renderPagination();
        this.updateBulkSelectInfo();
    }

    renderTableView(students) {
        const tbody = document.getElementById('studentsTableBody');
        tbody.innerHTML = students.map(student => this.createStudentRow(student)).join('');
    }

    renderGridView(students) {
        const grid = document.getElementById('studentsGrid');
        grid.innerHTML = students.map(student => this.createStudentCard(student)).join('');
    }

    createStudentRow(student) {
        const statusClass = {
            'ACTIVE': 'success',
            'INACTIVE': 'warning',
            'TRANSFERRED': 'info',
            'DROPPED': 'error',
            'GRADUATED': 'secondary'
        }[student.status] || 'secondary';

        return `
            <tr>
                <td>
                    <input type="checkbox" class="form-checkbox student-checkbox" 
                           data-student-id="${student.id}" ${this.selectedStudents.has(student.id) ? 'checked' : ''}>
                </td>
                <td>
                    <div class="font-mono text-sm">${student.admission_number}</div>
                </td>
                <td>
                    <div class="flex items-center gap-3">
                        <div class="avatar">
                            <img src="${student.profile_picture || '/images/default-avatar.png'}" 
                                 alt="${student.full_name}" class="w-8 h-8 rounded-full">
                        </div>
                        <div>
                            <div class="font-medium">${student.full_name}</div>
                            <div class="text-sm text-muted">${student.gender || 'Not specified'}</div>
                        </div>
                    </div>
                </td>
                <td>
                    <div class="font-medium">${student.class_name}</div>
                    <div class="text-sm text-muted">Section ${student.section_name || 'A'}</div>
                </td>
                <td>
                    <div class="font-medium">${student.parent_name || 'Not provided'}</div>
                    <div class="text-sm text-muted">${student.parent_email || 'No email'}</div>
                </td>
                <td>
                    <div class="text-sm">${student.contact_number || 'Not provided'}</div>
                </td>
                <td>
                    <span class="badge badge-${statusClass}">${student.status}</span>
                </td>
                <td>
                    <div class="flex items-center gap-2">
                        <button class="btn btn-sm btn-ghost" onclick="studentActions.show(${student.id})"
                                title="More actions">
                            <i class="fas fa-ellipsis-v"></i>
                        </button>
                        <a href="/students/${student.id}/edit" class="btn btn-sm btn-ghost" title="Edit">
                            <i class="fas fa-edit"></i>
                        </a>
                        <a href="/students/${student.id}" class="btn btn-sm btn-ghost" title="View">
                            <i class="fas fa-eye"></i>
                        </a>
                    </div>
                </td>
            </tr>
        `;
    }

    createStudentCard(student) {
        const statusClass = {
            'ACTIVE': 'success',
            'INACTIVE': 'warning',
            'TRANSFERRED': 'info',
            'DROPPED': 'error',
            'GRADUATED': 'secondary'
        }[student.status] || 'secondary';

        return `
            <div class="card hover:shadow-md transition-shadow">
                <div class="card-body">
                    <div class="flex items-start justify-between mb-3">
                        <input type="checkbox" class="form-checkbox student-checkbox" 
                               data-student-id="${student.id}" ${this.selectedStudents.has(student.id) ? 'checked' : ''}>
                        <span class="badge badge-${statusClass}">${student.status}</span>
                    </div>
                    
                    <div class="text-center mb-4">
                        <img src="${student.profile_picture || '/images/default-avatar.png'}" 
                             alt="${student.full_name}" class="w-16 h-16 rounded-full mx-auto mb-2">
                        <h4 class="font-medium">${student.full_name}</h4>
                        <p class="text-sm text-muted">${student.admission_number}</p>
                    </div>
                    
                    <div class="space-y-2 text-sm">
                        <div class="flex justify-between">
                            <span class="text-muted">Class:</span>
                            <span>${student.class_name} - ${student.section_name || 'A'}</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-muted">Parent:</span>
                            <span>${utils.truncate(student.parent_name || 'Not provided', 15)}</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-muted">Contact:</span>
                            <span>${utils.truncate(student.contact_number || 'Not provided', 15)}</span>
                        </div>
                    </div>
                    
                    <div class="flex items-center gap-2 mt-4">
                        <a href="/students/${student.id}" class="btn btn-sm btn-primary flex-1">
                            <i class="fas fa-eye mr-1"></i>
                            View
                        </a>
                        <button class="btn btn-sm btn-ghost" onclick="studentActions.show(${student.id})">
                            <i class="fas fa-ellipsis-v"></i>
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    updateStats() {
        const stats = {
            total: this.students.length,
            active: this.students.filter(s => s.status === 'ACTIVE').length,
            newAdmissions: this.students.filter(s => {
                const admissionDate = new Date(s.admission_date);
                const thirtyDaysAgo = new Date();
                thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
                return admissionDate > thirtyDaysAgo;
            }).length,
            pending: this.students.filter(s => s.status === 'PENDING').length
        };

        document.getElementById('totalStudents').textContent = utils.formatNumber(stats.total);
        document.getElementById('activeStudents').textContent = utils.formatNumber(stats.active);
        document.getElementById('newAdmissions').textContent = utils.formatNumber(stats.newAdmissions);
        document.getElementById('pendingApprovals').textContent = utils.formatNumber(stats.pending);
    }

    updateCounts() {
        document.getElementById('totalCount').textContent = this.filteredStudents.length;
        document.getElementById('showingCount').textContent = 
            Math.min(this.pageSize, this.filteredStudents.length - (this.currentPage - 1) * this.pageSize);
    }

    renderPagination() {
        const totalPages = Math.ceil(this.filteredStudents.length / this.pageSize);
        const pagination = document.getElementById('pagination');
        
        if (totalPages <= 1) {
            pagination.innerHTML = '';
            return;
        }

        let paginationHtml = `
            <button class="btn btn-sm btn-ghost ${this.currentPage === 1 ? 'disabled' : ''}" 
                    onclick="studentsManager.goToPage(${this.currentPage - 1})" ${this.currentPage === 1 ? 'disabled' : ''}>
                <i class="fas fa-chevron-left"></i>
            </button>
        `;

        const startPage = Math.max(1, this.currentPage - 2);
        const endPage = Math.min(totalPages, this.currentPage + 2);

        if (startPage > 1) {
            paginationHtml += `<button class="btn btn-sm btn-ghost" onclick="studentsManager.goToPage(1)">1</button>`;
            if (startPage > 2) {
                paginationHtml += `<span class="px-2">...</span>`;
            }
        }

        for (let i = startPage; i <= endPage; i++) {
            paginationHtml += `
                <button class="btn btn-sm ${i === this.currentPage ? 'btn-primary' : 'btn-ghost'}" 
                        onclick="studentsManager.goToPage(${i})">${i}</button>
            `;
        }

        if (endPage < totalPages) {
            if (endPage < totalPages - 1) {
                paginationHtml += `<span class="px-2">...</span>`;
            }
            paginationHtml += `<button class="btn btn-sm btn-ghost" onclick="studentsManager.goToPage(${totalPages})">${totalPages}</button>`;
        }

        paginationHtml += `
            <button class="btn btn-sm btn-ghost ${this.currentPage === totalPages ? 'disabled' : ''}" 
                    onclick="studentsManager.goToPage(${this.currentPage + 1})" ${this.currentPage === totalPages ? 'disabled' : ''}>
                <i class="fas fa-chevron-right"></i>
            </button>
        `;

        pagination.innerHTML = paginationHtml;
    }

    goToPage(page) {
        const totalPages = Math.ceil(this.filteredStudents.length / this.pageSize);
        if (page >= 1 && page <= totalPages) {
            this.currentPage = page;
            this.renderStudents();
        }
    }

    toggleSelectAll(checked) {
        const checkboxes = document.querySelectorAll('.student-checkbox');
        checkboxes.forEach(checkbox => {
            checkbox.checked = checked;
            const studentId = parseInt(checkbox.getAttribute('data-student-id'));
            if (checked) {
                this.selectedStudents.add(studentId);
            } else {
                this.selectedStudents.delete(studentId);
            }
        });
        this.updateBulkSelectInfo();
    }

    updateBulkSelectInfo() {
        const info = document.querySelector('.bulk-select-info');
        const count = document.getElementById('selectedCount');
        
        if (this.selectedStudents.size > 0) {
            info.classList.remove('hidden');
            count.textContent = this.selectedStudents.size;
        } else {
            info.classList.add('hidden');
        }
    }
}

// Student Actions
const studentActions = {
    show(studentId) {
        const student = studentsManager.students.find(s => s.id === studentId);
        if (!student) return;

        const actions = [
            { icon: 'fas fa-eye', label: 'View Profile', action: () => window.location.href = `/students/${studentId}` },
            { icon: 'fas fa-edit', label: 'Edit Student', action: () => window.location.href = `/students/${studentId}/edit` },
            { icon: 'fas fa-id-card', label: 'Generate ID Card', action: () => this.generateIdCard(studentId) },
            { icon: 'fas fa-calendar-check', label: 'View Attendance', action: () => window.location.href = `/attendance/student/${studentId}` },
            { icon: 'fas fa-rupee-sign', label: 'Fee Details', action: () => window.location.href = `/fees/student/${studentId}` },
            { icon: 'fas fa-exchange-alt', label: 'Transfer Student', action: () => this.transferStudent(studentId) },
            { icon: 'fas fa-envelope', label: 'Send Message', action: () => this.sendMessage(studentId) },
            { icon: 'fas fa-user-slash', label: 'Mark Inactive', action: () => this.toggleStatus(studentId, 'INACTIVE'), class: 'text-warning' }
        ];

        const actionsList = document.getElementById('studentActionsList');
        actionsList.innerHTML = actions.map(action => `
            <button class="btn btn-outline w-full justify-start ${action.class || ''}" 
                    onclick="(${action.action.toString()})(); document.getElementById('studentActionsModal').classList.remove('active');">
                <i class="${action.icon} mr-3"></i>
                ${action.label}
            </button>
        `).join('');

        document.getElementById('studentActionsModal').classList.add('active');
    },

    async generateIdCard(studentId) {
        try {
            await api.download(`/api/students/${studentId}/id-card`, 'student-id-card.pdf');
            notifications.success('ID Card Generated', 'ID card download will begin shortly');
        } catch (error) {
            notifications.error('Generation Failed', error.message);
        }
    },

    transferStudent(studentId) {
        window.location.href = `/students/${studentId}/transfer`;
    },

    sendMessage(studentId) {
        window.location.href = `/communication/compose?studentId=${studentId}`;
    },

    async toggleStatus(studentId, newStatus) {
        try {
            const response = await api.patch(`/api/students/${studentId}/status`, { status: newStatus });
            if (response.success) {
                notifications.success('Status Updated', `Student ${newStatus.toLowerCase()} successfully`);
                await studentsManager.loadData();
                studentsManager.renderStudents();
            }
        } catch (error) {
            notifications.error('Update Failed', error.message);
        }
    }
};

// Bulk Actions
const bulkActions = {
    show() {
        if (studentsManager.selectedStudents.size === 0) {
            notifications.warning('No Selection', 'Please select students to perform bulk actions');
            return;
        }
        document.getElementById('bulkActionsModal').classList.add('active');
    },

    async promote() {
        window.location.href = `/students/bulk/promote?studentIds=${Array.from(studentsManager.selectedStudents).join(',')}`;
    },

    async changeSection() {
        window.location.href = `/students/bulk/change-section?studentIds=${Array.from(studentsManager.selectedStudents).join(',')}`;
    },

    async generateIdCards() {
        const selectedIds = Array.from(studentsManager.selectedStudents);
        try {
            await api.download('/api/students/bulk/id-cards', 'student-id-cards.pdf', { studentIds: selectedIds });
            notifications.success('ID Cards Generated', 'Download will begin shortly');
        } catch (error) {
            notifications.error('Generation Failed', error.message);
        }
    },

    async sendNotification() {
        const selectedIds = Array.from(studentsManager.selectedStudents);
        window.location.href = `/communication/compose?studentIds=${selectedIds.join(',')}`;
    },

    async export() {
        const selectedIds = Array.from(studentsManager.selectedStudents);
        try {
            await api.download('/api/students/export', 'students-export.xlsx', { studentIds: selectedIds });
            notifications.success('Export Started', 'Download will begin shortly');
        } catch (error) {
            notifications.error('Export Failed', error.message);
        }
    },

    async markInactive() {
        notifications.confirm(
            'Mark Students Inactive',
            `Mark ${studentsManager.selectedStudents.size} selected students as inactive?`,
            async () => {
                await this.performBulkAction('mark-inactive', 'Marking students inactive...');
            }
        );
    },

    async performBulkAction(action, loadingMessage) {
        const selectedIds = Array.from(studentsManager.selectedStudents);
        const loadingId = notifications.loading(loadingMessage);

        try {
            const response = await api.post('/api/students/bulk-action', {
                action,
                studentIds: selectedIds
            });

            if (response.success) {
                notifications.hideLoading(loadingId, 'success', 'Action Completed', 
                    `${action} completed for ${selectedIds.length} students`);
                
                studentsManager.selectedStudents.clear();
                await studentsManager.loadData();
                studentsManager.renderStudents();
                document.getElementById('bulkActionsModal').classList.remove('active');
            }
        } catch (error) {
            notifications.hideLoading(loadingId, 'error', 'Action Failed', error.message);
        }
    }
};

// Global functions
function resetFilters() {
    document.getElementById('searchInput').value = '';
    document.getElementById('classFilter').value = '';
    document.getElementById('sectionFilter').value = '';
    document.getElementById('statusFilter').value = '';
    document.getElementById('academicYearFilter').value = '';
    studentsManager.applyFilters();
}

function toggleView(view) {
    studentsManager.toggleView(view);
}

async function exportStudents() {
    try {
        await api.download('/api/students/export', 'students-export.xlsx');
        notifications.success('Export Started', 'Download will begin shortly');
    } catch (error) {
        notifications.error('Export Failed', error.message);
    }
}

function printStudents() {
    window.print();
}

async function generateIdCards() {
    try {
        await api.download('/api/students/bulk/id-cards', 'all-student-id-cards.pdf');
        notifications.success('ID Cards Generated', 'Download will begin shortly');
    } catch (error) {
        notifications.error('Generation Failed', error.message);
    }
}

// Initialize when DOM is ready
let studentsManager;
document.addEventListener('DOMContentLoaded', () => {
    studentsManager = new StudentsManager();
});

// Handle checkbox selection
document.addEventListener('change', (e) => {
    if (e.target.classList.contains('student-checkbox')) {
        const studentId = parseInt(e.target.getAttribute('data-student-id'));
        if (e.target.checked) {
            studentsManager.selectedStudents.add(studentId);
        } else {
            studentsManager.selectedStudents.delete(studentId);
        }
        studentsManager.updateBulkSelectInfo();
    }
});
</script>