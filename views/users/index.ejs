<!-- Users page uses layouts/main layout automatically -->

<!-- Users Management Page -->
<div class="page-container">
  <!-- Page Header -->
  <div class="page-header">
    <div class="flex items-center justify-between">
      <div>
        <h1 class="page-title">User Management</h1>
        <p class="page-subtitle">Manage users, roles, and permissions</p>
      </div>
      <div class="flex items-center gap-3">
        <button class="btn btn-outline" onclick="bulkActions.show()">
          <i class="fas fa-tasks mr-2"></i>
          Bulk Actions
        </button>
        <a href="/users/create" class="btn btn-primary">
          <i class="fas fa-user-plus mr-2"></i>
          Add User
        </a>
      </div>
    </div>
  </div>

  <!-- Filters and Search -->
  <div class="card mb-6">
    <div class="card-body">
      <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div class="form-group">
          <label class="form-label">Search</label>
          <div class="relative">
            <input type="text" id="searchInput" class="form-input pl-10" 
                   placeholder="Search users...">
            <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-muted"></i>
          </div>
        </div>

        <div class="form-group">
          <label class="form-label">Role</label>
          <select id="roleFilter" class="form-select">
            <option value="">All Roles</option>
            <option value="SYSTEM_ADMIN">System Admin</option>
            <option value="TRUST_ADMIN">Trust Admin</option>
            <option value="SCHOOL_ADMIN">School Admin</option>
            <option value="TEACHER">Teacher</option>
            <option value="ACCOUNTANT">Accountant</option>
            <option value="PARENT">Parent</option>
          </select>
        </div>

        <div class="form-group">
          <label class="form-label">Status</label>
          <select id="statusFilter" class="form-select">
            <option value="">All Status</option>
            <option value="ACTIVE">Active</option>
            <option value="INACTIVE">Inactive</option>
            <option value="SUSPENDED">Suspended</option>
            <option value="PENDING">Pending</option>
          </select>
        </div>

        <div class="form-group">
          <label class="form-label">School</label>
          <select id="schoolFilter" class="form-select">
            <option value="">All Schools</option>
            <!-- Schools will be populated by JavaScript -->
          </select>
        </div>
      </div>
      
      <div class="flex items-center justify-between mt-4">
        <button class="btn btn-secondary btn-sm" onclick="resetFilters()">
          <i class="fas fa-undo mr-2"></i>
          Reset Filters
        </button>
        
        <div class="flex items-center gap-3">
          <button class="btn btn-outline btn-sm" onclick="exportUsers()">
            <i class="fas fa-download mr-2"></i>
            Export
          </button>
          <button class="btn btn-outline btn-sm" onclick="printUsers()">
            <i class="fas fa-print mr-2"></i>
            Print
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Users Table -->
  <div class="card">
    <div class="card-header">
      <div class="flex items-center justify-between">
        <h3 class="font-semibold">Users List</h3>
        <div class="flex items-center gap-3">
          <span class="text-sm text-muted">
            Showing <span id="showingCount">0</span> of <span id="totalCount">0</span> users
          </span>
          <div class="bulk-select-info hidden">
            <span class="bg-primary-50 text-primary px-3 py-1 rounded-lg text-sm">
              <span id="selectedCount">0</span> users selected
            </span>
          </div>
        </div>
      </div>
    </div>
    <div class="card-body p-0">
      <div class="table-responsive">
        <table class="table" id="usersTable">
          <thead>
            <tr>
              <th class="w-12">
                <input type="checkbox" id="selectAll" class="form-checkbox">
              </th>
              <th class="sortable" data-sort="name">
                Name
                <i class="fas fa-sort ml-1"></i>
              </th>
              <th class="sortable" data-sort="email">
                Email
                <i class="fas fa-sort ml-1"></i>
              </th>
              <th class="sortable" data-sort="role">
                Role
                <i class="fas fa-sort ml-1"></i>
              </th>
              <th class="sortable" data-sort="school">
                School
                <i class="fas fa-sort ml-1"></i>
              </th>
              <th class="sortable" data-sort="status">
                Status
                <i class="fas fa-sort ml-1"></i>
              </th>
              <th class="sortable" data-sort="lastLogin">
                Last Login
                <i class="fas fa-sort ml-1"></i>
              </th>
              <th class="w-32">Actions</th>
            </tr>
          </thead>
          <tbody id="usersTableBody">
            <!-- Users will be populated by JavaScript -->
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- Pagination -->
  <div class="flex items-center justify-between mt-6">
    <div class="flex items-center gap-2">
      <span class="text-sm text-muted">Show</span>
      <select id="pageSize" class="form-select form-select-sm">
        <option value="10">10</option>
        <option value="25" selected>25</option>
        <option value="50">50</option>
        <option value="100">100</option>
      </select>
      <span class="text-sm text-muted">per page</span>
    </div>
    
    <div class="pagination" id="pagination">
      <!-- Pagination will be generated by JavaScript -->
    </div>
  </div>
</div>

<!-- User Actions Modal -->
<div id="userActionsModal" class="modal">
  <div class="modal-overlay"></div>
  <div class="modal-container max-w-md">
    <div class="modal-header">
      <h3 class="modal-title">User Actions</h3>
      <button type="button" class="modal-close">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <div class="modal-body">
      <div class="space-y-3" id="userActionsList">
        <!-- Actions will be populated dynamically -->
      </div>
    </div>
  </div>
</div>

<!-- Bulk Actions Modal -->
<div id="bulkActionsModal" class="modal">
  <div class="modal-overlay"></div>
  <div class="modal-container max-w-md">
    <div class="modal-header">
      <h3 class="modal-title">Bulk Actions</h3>
      <button type="button" class="modal-close">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <div class="modal-body">
      <div class="space-y-3">
        <button class="btn btn-outline w-full justify-start" onclick="bulkActions.activate()">
          <i class="fas fa-check-circle mr-3 text-success"></i>
          Activate Selected Users
        </button>
        <button class="btn btn-outline w-full justify-start" onclick="bulkActions.deactivate()">
          <i class="fas fa-times-circle mr-3 text-warning"></i>
          Deactivate Selected Users
        </button>
        <button class="btn btn-outline w-full justify-start" onclick="bulkActions.resetPassword()">
          <i class="fas fa-key mr-3 text-info"></i>
          Reset Passwords
        </button>
        <button class="btn btn-outline w-full justify-start" onclick="bulkActions.export()">
          <i class="fas fa-download mr-3 text-primary"></i>
          Export Selected Users
        </button>
        <button class="btn btn-outline w-full justify-start text-error" onclick="bulkActions.delete()">
          <i class="fas fa-trash mr-3"></i>
          Delete Selected Users
        </button>
      </div>
    </div>
  </div>
</div>

<script>
/**
 * Users Management JavaScript
 */
class UsersManager {
    constructor() {
        this.users = [];
        this.filteredUsers = [];
        this.currentPage = 1;
        this.pageSize = 25;
        this.sortField = 'name';
        this.sortDirection = 'asc';
        this.selectedUsers = new Set();
        this.init();
    }

    async init() {
        await this.loadUsers();
        await this.loadSchools();
        this.setupEventListeners();
        this.renderUsers();
    }

    setupEventListeners() {
        // Search and filters
        document.getElementById('searchInput').addEventListener('input', 
            utils.debounce(() => this.applyFilters(), 300));
        document.getElementById('roleFilter').addEventListener('change', () => this.applyFilters());
        document.getElementById('statusFilter').addEventListener('change', () => this.applyFilters());
        document.getElementById('schoolFilter').addEventListener('change', () => this.applyFilters());
        
        // Page size
        document.getElementById('pageSize').addEventListener('change', (e) => {
            this.pageSize = parseInt(e.target.value);
            this.currentPage = 1;
            this.renderUsers();
        });

        // Select all checkbox
        document.getElementById('selectAll').addEventListener('change', (e) => {
            this.toggleSelectAll(e.target.checked);
        });

        // Table sorting
        document.querySelectorAll('.sortable').forEach(header => {
            header.addEventListener('click', () => {
                const field = header.getAttribute('data-sort');
                this.sort(field);
            });
        });

        // Modal event listeners
        this.setupModalEventListeners();
    }

    setupModalEventListeners() {
        // Close modals on overlay click
        document.querySelectorAll('.modal-overlay').forEach(overlay => {
            overlay.addEventListener('click', () => {
                overlay.closest('.modal').classList.remove('active');
            });
        });

        // Close modals on close button click
        document.querySelectorAll('.modal-close').forEach(closeBtn => {
            closeBtn.addEventListener('click', () => {
                closeBtn.closest('.modal').classList.remove('active');
            });
        });
    }

    async loadUsers() {
        try {
            const response = await api.get('/api/users');
            if (response.success) {
                this.users = response.data;
                this.filteredUsers = [...this.users];
            }
        } catch (error) {
            notifications.error('Load Failed', 'Failed to load users');
        }
    }

    async loadSchools() {
        try {
            const response = await api.get('/api/schools');
            if (response.success) {
                const schoolFilter = document.getElementById('schoolFilter');
                response.data.forEach(school => {
                    const option = document.createElement('option');
                    option.value = school.id;
                    option.textContent = school.school_name;
                    schoolFilter.appendChild(option);
                });
            }
        } catch (error) {
            console.warn('Failed to load schools');
        }
    }

    applyFilters() {
        const search = document.getElementById('searchInput').value.toLowerCase();
        const role = document.getElementById('roleFilter').value;
        const status = document.getElementById('statusFilter').value;
        const school = document.getElementById('schoolFilter').value;

        this.filteredUsers = this.users.filter(user => {
            const matchesSearch = !search || 
                user.full_name.toLowerCase().includes(search) ||
                user.email.toLowerCase().includes(search) ||
                user.employee_id?.toLowerCase().includes(search);
            
            const matchesRole = !role || user.role === role;
            const matchesStatus = !status || user.status === status;
            const matchesSchool = !school || user.school_id === parseInt(school);

            return matchesSearch && matchesRole && matchesStatus && matchesSchool;
        });

        this.currentPage = 1;
        this.renderUsers();
    }

    sort(field) {
        if (this.sortField === field) {
            this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';
        } else {
            this.sortField = field;
            this.sortDirection = 'asc';
        }

        this.filteredUsers.sort((a, b) => {
            let aVal = a[field] || '';
            let bVal = b[field] || '';

            if (typeof aVal === 'string') {
                aVal = aVal.toLowerCase();
                bVal = bVal.toLowerCase();
            }

            if (this.sortDirection === 'asc') {
                return aVal < bVal ? -1 : aVal > bVal ? 1 : 0;
            } else {
                return aVal > bVal ? -1 : aVal < bVal ? 1 : 0;
            }
        });

        this.updateSortIndicators();
        this.renderUsers();
    }

    updateSortIndicators() {
        document.querySelectorAll('.sortable').forEach(header => {
            const icon = header.querySelector('i');
            icon.className = 'fas fa-sort ml-1';
        });

        const activeHeader = document.querySelector(`[data-sort="${this.sortField}"]`);
        if (activeHeader) {
            const icon = activeHeader.querySelector('i');
            icon.className = `fas fa-sort-${this.sortDirection === 'asc' ? 'up' : 'down'} ml-1`;
        }
    }

    renderUsers() {
        const startIndex = (this.currentPage - 1) * this.pageSize;
        const endIndex = startIndex + this.pageSize;
        const paginatedUsers = this.filteredUsers.slice(startIndex, endIndex);

        const tbody = document.getElementById('usersTableBody');
        tbody.innerHTML = paginatedUsers.map(user => this.createUserRow(user)).join('');

        this.updateCounts();
        this.renderPagination();
        this.updateBulkSelectInfo();
    }

    createUserRow(user) {
        const statusClass = {
            'ACTIVE': 'success',
            'INACTIVE': 'warning',
            'SUSPENDED': 'error',
            'PENDING': 'info'
        }[user.status] || 'secondary';

        return `
            <tr>
                <td>
                    <input type="checkbox" class="form-checkbox user-checkbox" 
                           data-user-id="${user.id}" ${this.selectedUsers.has(user.id) ? 'checked' : ''}>
                </td>
                <td>
                    <div class="flex items-center gap-3">
                        <div class="avatar">
                            <img src="${user.profile_picture || '/images/default-avatar.png'}" 
                                 alt="${user.full_name}" class="w-8 h-8 rounded-full">
                        </div>
                        <div>
                            <div class="font-medium">${user.full_name}</div>
                            <div class="text-sm text-muted">${user.employee_id || 'No ID'}</div>
                        </div>
                    </div>
                </td>
                <td>
                    <div class="font-medium">${user.email}</div>
                    <div class="text-sm text-muted">${user.mobile || 'No mobile'}</div>
                </td>
                <td>
                    <span class="badge badge-secondary">${user.role.replace('_', ' ')}</span>
                </td>
                <td>
                    <div class="text-sm">${user.school_name || 'No School'}</div>
                </td>
                <td>
                    <span class="badge badge-${statusClass}">${user.status}</span>
                </td>
                <td>
                    <div class="text-sm">${user.last_login ? utils.formatDateTime(user.last_login) : 'Never'}</div>
                </td>
                <td>
                    <div class="flex items-center gap-2">
                        <button class="btn btn-sm btn-ghost" onclick="userActions.show(${user.id})"
                                title="More actions">
                            <i class="fas fa-ellipsis-v"></i>
                        </button>
                        <a href="/users/${user.id}/edit" class="btn btn-sm btn-ghost" title="Edit">
                            <i class="fas fa-edit"></i>
                        </a>
                        <a href="/users/${user.id}" class="btn btn-sm btn-ghost" title="View">
                            <i class="fas fa-eye"></i>
                        </a>
                    </div>
                </td>
            </tr>
        `;
    }

    updateCounts() {
        document.getElementById('totalCount').textContent = this.filteredUsers.length;
        document.getElementById('showingCount').textContent = 
            Math.min(this.pageSize, this.filteredUsers.length - (this.currentPage - 1) * this.pageSize);
    }

    renderPagination() {
        const totalPages = Math.ceil(this.filteredUsers.length / this.pageSize);
        const pagination = document.getElementById('pagination');
        
        if (totalPages <= 1) {
            pagination.innerHTML = '';
            return;
        }

        let paginationHtml = `
            <button class="btn btn-sm btn-ghost ${this.currentPage === 1 ? 'disabled' : ''}" 
                    onclick="usersManager.goToPage(${this.currentPage - 1})" ${this.currentPage === 1 ? 'disabled' : ''}>
                <i class="fas fa-chevron-left"></i>
            </button>
        `;

        const startPage = Math.max(1, this.currentPage - 2);
        const endPage = Math.min(totalPages, this.currentPage + 2);

        if (startPage > 1) {
            paginationHtml += `<button class="btn btn-sm btn-ghost" onclick="usersManager.goToPage(1)">1</button>`;
            if (startPage > 2) {
                paginationHtml += `<span class="px-2">...</span>`;
            }
        }

        for (let i = startPage; i <= endPage; i++) {
            paginationHtml += `
                <button class="btn btn-sm ${i === this.currentPage ? 'btn-primary' : 'btn-ghost'}" 
                        onclick="usersManager.goToPage(${i})">${i}</button>
            `;
        }

        if (endPage < totalPages) {
            if (endPage < totalPages - 1) {
                paginationHtml += `<span class="px-2">...</span>`;
            }
            paginationHtml += `<button class="btn btn-sm btn-ghost" onclick="usersManager.goToPage(${totalPages})">${totalPages}</button>`;
        }

        paginationHtml += `
            <button class="btn btn-sm btn-ghost ${this.currentPage === totalPages ? 'disabled' : ''}" 
                    onclick="usersManager.goToPage(${this.currentPage + 1})" ${this.currentPage === totalPages ? 'disabled' : ''}>
                <i class="fas fa-chevron-right"></i>
            </button>
        `;

        pagination.innerHTML = paginationHtml;
    }

    goToPage(page) {
        const totalPages = Math.ceil(this.filteredUsers.length / this.pageSize);
        if (page >= 1 && page <= totalPages) {
            this.currentPage = page;
            this.renderUsers();
        }
    }

    toggleSelectAll(checked) {
        const checkboxes = document.querySelectorAll('.user-checkbox');
        checkboxes.forEach(checkbox => {
            checkbox.checked = checked;
            const userId = parseInt(checkbox.getAttribute('data-user-id'));
            if (checked) {
                this.selectedUsers.add(userId);
            } else {
                this.selectedUsers.delete(userId);
            }
        });
        this.updateBulkSelectInfo();
    }

    updateBulkSelectInfo() {
        const info = document.querySelector('.bulk-select-info');
        const count = document.getElementById('selectedCount');
        
        if (this.selectedUsers.size > 0) {
            info.classList.remove('hidden');
            count.textContent = this.selectedUsers.size;
        } else {
            info.classList.add('hidden');
        }
    }
}

// User Actions
const userActions = {
    show(userId) {
        const user = usersManager.users.find(u => u.id === userId);
        if (!user) return;

        const actions = [
            { icon: 'fas fa-eye', label: 'View Profile', action: () => window.location.href = `/users/${userId}` },
            { icon: 'fas fa-edit', label: 'Edit User', action: () => window.location.href = `/users/${userId}/edit` },
            { icon: 'fas fa-key', label: 'Reset Password', action: () => this.resetPassword(userId) },
            { icon: 'fas fa-envelope', label: 'Send Message', action: () => this.sendMessage(userId) },
            user.status === 'ACTIVE' 
                ? { icon: 'fas fa-ban', label: 'Deactivate', action: () => this.toggleStatus(userId, 'INACTIVE'), class: 'text-warning' }
                : { icon: 'fas fa-check', label: 'Activate', action: () => this.toggleStatus(userId, 'ACTIVE'), class: 'text-success' },
            { icon: 'fas fa-trash', label: 'Delete User', action: () => this.deleteUser(userId), class: 'text-error' }
        ];

        const actionsList = document.getElementById('userActionsList');
        actionsList.innerHTML = actions.map(action => `
            <button class="btn btn-outline w-full justify-start ${action.class || ''}" 
                    onclick="(${action.action.toString()})(); document.getElementById('userActionsModal').classList.remove('active');">
                <i class="${action.icon} mr-3"></i>
                ${action.label}
            </button>
        `).join('');

        document.getElementById('userActionsModal').classList.add('active');
    },

    async resetPassword(userId) {
        notifications.confirm(
            'Reset Password',
            'This will generate a new password and send it to the user\'s email. Continue?',
            async () => {
                try {
                    const response = await api.post(`/api/users/${userId}/reset-password`);
                    if (response.success) {
                        notifications.success('Password Reset', 'New password has been sent to user\'s email');
                    }
                } catch (error) {
                    notifications.error('Reset Failed', error.message);
                }
            }
        );
    },

    sendMessage(userId) {
        // Redirect to compose message page with user pre-selected
        window.location.href = `/communication/compose?userId=${userId}`;
    },

    async toggleStatus(userId, newStatus) {
        try {
            const response = await api.patch(`/api/users/${userId}/status`, { status: newStatus });
            if (response.success) {
                notifications.success('Status Updated', `User ${newStatus.toLowerCase()} successfully`);
                await usersManager.loadUsers();
                usersManager.renderUsers();
            }
        } catch (error) {
            notifications.error('Update Failed', error.message);
        }
    },

    deleteUser(userId) {
        notifications.confirm(
            'Delete User',
            'This action cannot be undone. Are you sure you want to delete this user?',
            async () => {
                try {
                    const response = await api.delete(`/api/users/${userId}`);
                    if (response.success) {
                        notifications.success('User Deleted', 'User has been deleted successfully');
                        await usersManager.loadUsers();
                        usersManager.renderUsers();
                    }
                } catch (error) {
                    notifications.error('Delete Failed', error.message);
                }
            }
        );
    }
};

// Bulk Actions
const bulkActions = {
    show() {
        if (usersManager.selectedUsers.size === 0) {
            notifications.warning('No Selection', 'Please select users to perform bulk actions');
            return;
        }
        document.getElementById('bulkActionsModal').classList.add('active');
    },

    async activate() {
        await this.performBulkAction('activate', 'Activating users...');
    },

    async deactivate() {
        await this.performBulkAction('deactivate', 'Deactivating users...');
    },

    async resetPassword() {
        notifications.confirm(
            'Reset Passwords',
            `Reset passwords for ${usersManager.selectedUsers.size} selected users?`,
            async () => {
                await this.performBulkAction('reset-passwords', 'Resetting passwords...');
            }
        );
    },

    async delete() {
        notifications.confirm(
            'Delete Users',
            `Delete ${usersManager.selectedUsers.size} selected users? This action cannot be undone.`,
            async () => {
                await this.performBulkAction('delete', 'Deleting users...');
            }
        );
    },

    async export() {
        const selectedIds = Array.from(usersManager.selectedUsers);
        try {
            await api.download('/api/users/export', 'users-export.xlsx', { userIds: selectedIds });
            notifications.success('Export Started', 'Download will begin shortly');
        } catch (error) {
            notifications.error('Export Failed', error.message);
        }
    },

    async performBulkAction(action, loadingMessage) {
        const selectedIds = Array.from(usersManager.selectedUsers);
        const loadingId = notifications.loading(loadingMessage);

        try {
            const response = await api.post('/api/users/bulk-action', {
                action,
                userIds: selectedIds
            });

            if (response.success) {
                notifications.hideLoading(loadingId, 'success', 'Action Completed', 
                    `${action} completed for ${selectedIds.length} users`);
                
                usersManager.selectedUsers.clear();
                await usersManager.loadUsers();
                usersManager.renderUsers();
                document.getElementById('bulkActionsModal').classList.remove('active');
            }
        } catch (error) {
            notifications.hideLoading(loadingId, 'error', 'Action Failed', error.message);
        }
    }
};

// Global functions
function resetFilters() {
    document.getElementById('searchInput').value = '';
    document.getElementById('roleFilter').value = '';
    document.getElementById('statusFilter').value = '';
    document.getElementById('schoolFilter').value = '';
    usersManager.applyFilters();
}

async function exportUsers() {
    try {
        await api.download('/api/users/export', 'users-export.xlsx');
        notifications.success('Export Started', 'Download will begin shortly');
    } catch (error) {
        notifications.error('Export Failed', error.message);
    }
}

function printUsers() {
    window.print();
}

// Initialize when DOM is ready
let usersManager;
document.addEventListener('DOMContentLoaded', () => {
    usersManager = new UsersManager();
});

// Handle checkbox selection
document.addEventListener('change', (e) => {
    if (e.target.classList.contains('user-checkbox')) {
        const userId = parseInt(e.target.getAttribute('data-user-id'));
        if (e.target.checked) {
            usersManager.selectedUsers.add(userId);
        } else {
            usersManager.selectedUsers.delete(userId);
        }
        usersManager.updateBulkSelectInfo();
    }
});
</script>