<!-- Report Templates -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= title %> - School ERP</title>

    <!-- CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
      rel="stylesheet"
    />
    <link href="/css/dashboard.css" rel="stylesheet" />

    <style>
      .template-card {
        transition: all 0.3s ease;
        border: none;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        cursor: pointer;
      }

      .template-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
      }

      .template-preview {
        height: 200px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 3rem;
        border-radius: 8px 8px 0 0;
      }

      .category-tab {
        background: white;
        border: 2px solid #dee2e6;
        border-radius: 12px;
        padding: 1rem;
        margin-bottom: 0.5rem;
        cursor: pointer;
        transition: all 0.3s ease;
      }

      .category-tab.active {
        border-color: #007bff;
        background: #f8f9ff;
      }

      .category-tab:hover {
        border-color: #007bff;
      }

      .template-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
      }

      .usage-badge {
        position: absolute;
        top: 10px;
        right: 10px;
        background: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 12px;
        font-size: 0.75rem;
      }

      .template-actions {
        position: absolute;
        top: 10px;
        left: 10px;
        opacity: 0;
        transition: opacity 0.3s ease;
      }

      .template-card:hover .template-actions {
        opacity: 1;
      }

      .filter-section {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 2rem;
      }

      .search-box {
        position: relative;
      }

      .search-box i {
        position: absolute;
        left: 15px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
      }

      .search-box input {
        padding-left: 45px;
      }
    </style>
  </head>
  <body>
    <%- include('../partials/navbar') %>

    <div class="container-fluid">
      <div class="row">
        <%- include('../partials/sidebar') %>

        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
          <!-- Header -->
          <div
            class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom"
          >
            <h1 class="h2"><i class="fas fa-file-alt me-2"></i><%= pageTitle %></h1>
            <div class="btn-toolbar mb-2 mb-md-0">
              <% if (['SYSTEM_ADMIN', 'TRUST_ADMIN', 'SCHOOL_ADMIN'].includes(userRole)) { %>
              <div class="btn-group me-2">
                <button class="btn btn-primary" onclick="createTemplate()">
                  <i class="fas fa-plus me-1"></i>Create Template
                </button>
                <button class="btn btn-outline-secondary" onclick="importTemplate()">
                  <i class="fas fa-upload me-1"></i>Import
                </button>
              </div>
              <% } %>
            </div>
          </div>

          <!-- Filter Section -->
          <div class="filter-section">
            <div class="row g-3 align-items-center">
              <div class="col-md-6">
                <div class="search-box">
                  <i class="fas fa-search"></i>
                  <input
                    type="text"
                    class="form-control"
                    id="searchTemplates"
                    placeholder="Search templates by name or description..."
                  />
                </div>
              </div>
              <div class="col-md-3">
                <select class="form-select" id="categoryFilter">
                  <option value="">All Categories</option>
                  <option value="Academic">Academic</option>
                  <option value="Financial">Financial</option>
                  <option value="HR">HR</option>
                  <option value="Administrative">Administrative</option>
                  <option value="Custom">Custom</option>
                </select>
              </div>
              <div class="col-md-3">
                <select class="form-select" id="sortBy">
                  <option value="name">Sort by Name</option>
                  <option value="usage">Sort by Usage</option>
                  <option value="date">Sort by Date</option>
                  <option value="category">Sort by Category</option>
                </select>
              </div>
            </div>
          </div>

          <!-- Categories Tabs -->
          <div class="row mb-4">
            <div class="col-md-2">
              <div class="category-tab active" data-category="" onclick="filterByCategory('')">
                <div class="text-center">
                  <i class="fas fa-th-large fa-2x mb-2 text-primary"></i>
                  <div class="fw-bold">All Templates</div>
                  <div class="text-muted small" id="countAll">--</div>
                </div>
              </div>
            </div>
            <div class="col-md-2">
              <div
                class="category-tab"
                data-category="Academic"
                onclick="filterByCategory('Academic')"
              >
                <div class="text-center">
                  <i class="fas fa-graduation-cap fa-2x mb-2 text-success"></i>
                  <div class="fw-bold">Academic</div>
                  <div class="text-muted small" id="countAcademic">--</div>
                </div>
              </div>
            </div>
            <div class="col-md-2">
              <div
                class="category-tab"
                data-category="Financial"
                onclick="filterByCategory('Financial')"
              >
                <div class="text-center">
                  <i class="fas fa-dollar-sign fa-2x mb-2 text-warning"></i>
                  <div class="fw-bold">Financial</div>
                  <div class="text-muted small" id="countFinancial">--</div>
                </div>
              </div>
            </div>
            <div class="col-md-2">
              <div class="category-tab" data-category="HR" onclick="filterByCategory('HR')">
                <div class="text-center">
                  <i class="fas fa-users fa-2x mb-2 text-info"></i>
                  <div class="fw-bold">HR</div>
                  <div class="text-muted small" id="countHR">--</div>
                </div>
              </div>
            </div>
            <div class="col-md-2">
              <div
                class="category-tab"
                data-category="Administrative"
                onclick="filterByCategory('Administrative')"
              >
                <div class="text-center">
                  <i class="fas fa-cogs fa-2x mb-2 text-secondary"></i>
                  <div class="fw-bold">Admin</div>
                  <div class="text-muted small" id="countAdministrative">--</div>
                </div>
              </div>
            </div>
            <div class="col-md-2">
              <div class="category-tab" data-category="Custom" onclick="filterByCategory('Custom')">
                <div class="text-center">
                  <i class="fas fa-puzzle-piece fa-2x mb-2 text-purple"></i>
                  <div class="fw-bold">Custom</div>
                  <div class="text-muted small" id="countCustom">--</div>
                </div>
              </div>
            </div>
          </div>

          <!-- Templates Grid -->
          <div id="templatesContainer">
            <div class="text-center py-5">
              <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading templates...</span>
              </div>
              <div class="mt-2">Loading templates...</div>
            </div>
          </div>

          <!-- No templates message -->
          <div id="noTemplatesMessage" class="text-center py-5" style="display: none">
            <i class="fas fa-file-alt fa-4x text-muted mb-3"></i>
            <h4 class="text-muted">No Templates Found</h4>
            <p class="text-muted">No templates match your current filter criteria.</p>
            <% if (['SYSTEM_ADMIN', 'TRUST_ADMIN', 'SCHOOL_ADMIN'].includes(userRole)) { %>
            <button class="btn btn-primary" onclick="createTemplate()">
              <i class="fas fa-plus me-1"></i>Create Your First Template
            </button>
            <% } %>
          </div>
        </main>
      </div>
    </div>

    <!-- Template Detail Modal -->
    <div class="modal fade" id="templateModal" tabindex="-1">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="templateModalTitle">Template Details</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body" id="templateModalBody">
            <!-- Content will be populated dynamically -->
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="button" class="btn btn-primary" id="useTemplateBtn">
              <i class="fas fa-play me-1"></i>Use Template
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Create Template Modal -->
    <div class="modal fade" id="createTemplateModal" tabindex="-1">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Create New Template</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <form id="createTemplateForm">
              <div class="mb-3">
                <label class="form-label">Template Name</label>
                <input type="text" class="form-control" id="templateName" required />
              </div>
              <div class="mb-3">
                <label class="form-label">Description</label>
                <textarea class="form-control" id="templateDescription" rows="3"></textarea>
              </div>
              <div class="mb-3">
                <label class="form-label">Category</label>
                <select class="form-select" id="templateCategory" required>
                  <option value="">Select category...</option>
                  <option value="Academic">Academic</option>
                  <option value="Financial">Financial</option>
                  <option value="HR">HR</option>
                  <option value="Administrative">Administrative</option>
                  <option value="Custom">Custom</option>
                </select>
              </div>
              <div class="mb-3">
                <label class="form-label">Base Report</label>
                <select class="form-select" id="baseReport">
                  <option value="">Start from scratch</option>
                  <!-- Will be populated with existing reports -->
                </select>
                <small class="text-muted">Optionally start from an existing report</small>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-primary" onclick="saveTemplate()">
              <i class="fas fa-save me-1"></i>Create Template
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
      let allTemplates = [];
      let filteredTemplates = [];
      let currentCategory = '';

      // Initialize page
      document.addEventListener('DOMContentLoaded', function () {
        loadTemplates();
        setupEventListeners();
      });

      // Setup event listeners
      function setupEventListeners() {
        document.getElementById('searchTemplates').addEventListener('input', filterTemplates);
        document.getElementById('categoryFilter').addEventListener('change', filterTemplates);
        document.getElementById('sortBy').addEventListener('change', sortTemplates);
      }

      // Load templates
      async function loadTemplates() {
        try {
          const response = await fetch('/api/enhanced-reports/templates');
          const data = await response.json();

          if (data.success) {
            allTemplates = data.templates;
            filteredTemplates = [...allTemplates];
            renderTemplates();
            updateCategoryCounts();
          } else {
            showError('Failed to load templates');
          }
        } catch (error) {
          console.error('Error loading templates:', error);
          showError('Failed to load templates');
        }
      }

      // Render templates
      function renderTemplates() {
        const container = document.getElementById('templatesContainer');
        const noTemplatesMsg = document.getElementById('noTemplatesMessage');

        if (filteredTemplates.length === 0) {
          container.style.display = 'none';
          noTemplatesMsg.style.display = 'block';
          return;
        }

        container.style.display = 'block';
        noTemplatesMsg.style.display = 'none';

        const templatesHtml = `
                <div class="template-grid">
                    ${filteredTemplates
                      .map(
                        template => `
                        <div class="card template-card position-relative" onclick="viewTemplate(${template.id})">
                            <div class="template-preview">
                                <i class="fas ${getCategoryIcon(template.category)}"></i>
                            </div>
                            <div class="template-actions">
                                <div class="btn-group-vertical">
                                    <button class="btn btn-sm btn-light" onclick="event.stopPropagation(); previewTemplate(${template.id})" title="Preview">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button class="btn btn-sm btn-primary" onclick="event.stopPropagation(); useTemplate(${template.id})" title="Use Template">
                                        <i class="fas fa-play"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="usage-badge">
                                ${template.usage_count || 0} uses
                            </div>
                            <div class="card-body">
                                <h5 class="card-title">${template.name}</h5>
                                <p class="card-text text-muted small">${template.description || 'No description available'}</p>
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="badge bg-${getCategoryColor(template.category)}">${template.category}</span>
                                    <small class="text-muted">${new Date(template.created_at).toLocaleDateString()}</small>
                                </div>
                            </div>
                        </div>
                    `
                      )
                      .join('')}
                </div>
            `;

        container.innerHTML = templatesHtml;
      }

      // Get category icon
      function getCategoryIcon(category) {
        const icons = {
          Academic: 'fa-graduation-cap',
          Financial: 'fa-dollar-sign',
          HR: 'fa-users',
          Administrative: 'fa-cogs',
          Custom: 'fa-puzzle-piece'
        };
        return icons[category] || 'fa-file-alt';
      }

      // Get category color
      function getCategoryColor(category) {
        const colors = {
          Academic: 'success',
          Financial: 'warning',
          HR: 'info',
          Administrative: 'secondary',
          Custom: 'purple'
        };
        return colors[category] || 'primary';
      }

      // Update category counts
      function updateCategoryCounts() {
        const counts = allTemplates.reduce((acc, template) => {
          acc[template.category] = (acc[template.category] || 0) + 1;
          return acc;
        }, {});

        document.getElementById('countAll').textContent = allTemplates.length;
        document.getElementById('countAcademic').textContent = counts.Academic || 0;
        document.getElementById('countFinancial').textContent = counts.Financial || 0;
        document.getElementById('countHR').textContent = counts.HR || 0;
        document.getElementById('countAdministrative').textContent = counts.Administrative || 0;
        document.getElementById('countCustom').textContent = counts.Custom || 0;
      }

      // Filter by category
      function filterByCategory(category) {
        currentCategory = category;

        // Update active tab
        document.querySelectorAll('.category-tab').forEach(tab => {
          tab.classList.remove('active');
        });
        document.querySelector(`[data-category="${category}"]`).classList.add('active');

        // Update category filter dropdown
        document.getElementById('categoryFilter').value = category;

        filterTemplates();
      }

      // Filter templates
      function filterTemplates() {
        const search = document.getElementById('searchTemplates').value.toLowerCase();
        const category = document.getElementById('categoryFilter').value || currentCategory;

        filteredTemplates = allTemplates.filter(template => {
          const matchesSearch =
            !search ||
            template.name.toLowerCase().includes(search) ||
            (template.description && template.description.toLowerCase().includes(search));

          const matchesCategory = !category || template.category === category;

          return matchesSearch && matchesCategory;
        });

        sortTemplates();
      }

      // Sort templates
      function sortTemplates() {
        const sortBy = document.getElementById('sortBy').value;

        filteredTemplates.sort((a, b) => {
          switch (sortBy) {
            case 'name':
              return a.name.localeCompare(b.name);
            case 'usage':
              return (b.usage_count || 0) - (a.usage_count || 0);
            case 'date':
              return new Date(b.created_at) - new Date(a.created_at);
            case 'category':
              return a.category.localeCompare(b.category);
            default:
              return 0;
          }
        });

        renderTemplates();
      }

      // View template details
      function viewTemplate(templateId) {
        const template = allTemplates.find(t => t.id === templateId);
        if (!template) return;

        const modal = new bootstrap.Modal(document.getElementById('templateModal'));
        document.getElementById('templateModalTitle').textContent = template.name;

        const modalBody = document.getElementById('templateModalBody');
        modalBody.innerHTML = `
                <div class="row">
                    <div class="col-md-8">
                        <h6>Description</h6>
                        <p>${template.description || 'No description available'}</p>
                        
                        <h6>Configuration</h6>
                        <div class="bg-light p-3 rounded">
                            <pre><code>${JSON.stringify(template.config, null, 2)}</code></pre>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <h6>Details</h6>
                        <ul class="list-unstyled">
                            <li><strong>Category:</strong> ${template.category}</li>
                            <li><strong>Usage Count:</strong> ${template.usage_count || 0}</li>
                            <li><strong>Created:</strong> ${new Date(template.created_at).toLocaleDateString()}</li>
                            <li><strong>Created By:</strong> ${template.created_by}</li>
                        </ul>
                        
                        <div class="mt-3">
                            <button class="btn btn-outline-primary btn-sm w-100 mb-2" onclick="previewTemplate(${template.id})">
                                <i class="fas fa-eye me-1"></i>Preview Report
                            </button>
                            <button class="btn btn-primary btn-sm w-100" onclick="useTemplate(${template.id})">
                                <i class="fas fa-play me-1"></i>Use Template
                            </button>
                        </div>
                    </div>
                </div>
            `;

        // Set up use template button
        document.getElementById('useTemplateBtn').onclick = () => useTemplate(templateId);

        modal.show();
      }

      // Preview template
      async function previewTemplate(templateId) {
        try {
          // This would generate a preview of what the report would look like
          showSuccess('Preview functionality coming soon!');
        } catch (error) {
          console.error('Error previewing template:', error);
          showError('Failed to preview template');
        }
      }

      // Use template
      async function useTemplate(templateId) {
        const template = allTemplates.find(t => t.id === templateId);
        if (!template) return;

        const reportName = prompt(
          `Enter name for the new report:`,
          `${template.name} - ${new Date().toLocaleDateString()}`
        );
        if (!reportName) return;

        try {
          const response = await fetch(`/api/enhanced-reports/templates/${templateId}/use`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              name: reportName
            })
          });

          const data = await response.json();

          if (data.success) {
            showSuccess('Report created from template successfully!');
            setTimeout(() => {
              window.location.href = `/reports/view/${data.reportId}`;
            }, 2000);
          } else {
            showError('Failed to create report from template');
          }
        } catch (error) {
          console.error('Error using template:', error);
          showError('Failed to create report from template');
        }
      }

      // Create new template
      function createTemplate() {
        const modal = new bootstrap.Modal(document.getElementById('createTemplateModal'));

        // Load existing reports for base report selection
        loadReportsForTemplate();

        modal.show();
      }

      // Load reports for template creation
      async function loadReportsForTemplate() {
        try {
          const response = await fetch('/api/enhanced-reports');
          const data = await response.json();

          if (data.success) {
            const select = document.getElementById('baseReport');
            select.innerHTML = '<option value="">Start from scratch</option>';

            data.reports.forEach(report => {
              const option = document.createElement('option');
              option.value = report.id;
              option.textContent = report.name;
              select.appendChild(option);
            });
          }
        } catch (error) {
          console.error('Error loading reports:', error);
        }
      }

      // Save new template
      async function saveTemplate() {
        const name = document.getElementById('templateName').value;
        const description = document.getElementById('templateDescription').value;
        const category = document.getElementById('templateCategory').value;
        const baseReport = document.getElementById('baseReport').value;

        if (!name || !category) {
          showError('Please fill in all required fields');
          return;
        }

        try {
          let reportConfig = {};

          if (baseReport) {
            // Get configuration from existing report
            const response = await fetch(`/api/enhanced-reports/${baseReport}`);
            const data = await response.json();

            if (data.success) {
              // Extract relevant configuration
              reportConfig = {
                // This would contain the report configuration
                // For now, we'll use a placeholder
                tables: { main: 'placeholder' },
                fields: []
              };
            }
          } else {
            // Default empty configuration
            reportConfig = {
              tables: { main: 'students' },
              fields: [
                { table: 'students', column: 'name' },
                { table: 'students', column: 'email' }
              ]
            };
          }

          const templateConfig = {
            name,
            description,
            category,
            reportConfig
          };

          const response = await fetch('/api/enhanced-reports/templates', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(templateConfig)
          });

          const data = await response.json();

          if (data.success) {
            showSuccess('Template created successfully!');

            const modal = bootstrap.Modal.getInstance(
              document.getElementById('createTemplateModal')
            );
            modal.hide();

            // Reload templates
            loadTemplates();

            // Reset form
            document.getElementById('createTemplateForm').reset();
          } else {
            showError('Failed to create template');
          }
        } catch (error) {
          console.error('Error creating template:', error);
          showError('Failed to create template');
        }
      }

      // Import template
      function importTemplate() {
        // This would handle template import functionality
        showSuccess('Import functionality coming soon!');
      }

      // Utility functions
      function showSuccess(message) {
        const alert = document.createElement('div');
        alert.className = 'alert alert-success alert-dismissible fade show position-fixed';
        alert.style.top = '20px';
        alert.style.right = '20px';
        alert.style.zIndex = '9999';
        alert.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
        document.body.appendChild(alert);

        setTimeout(() => {
          if (alert.parentNode) {
            alert.parentNode.removeChild(alert);
          }
        }, 5000);
      }

      function showError(message) {
        const alert = document.createElement('div');
        alert.className = 'alert alert-danger alert-dismissible fade show position-fixed';
        alert.style.top = '20px';
        alert.style.right = '20px';
        alert.style.zIndex = '9999';
        alert.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
        document.body.appendChild(alert);

        setTimeout(() => {
          if (alert.parentNode) {
            alert.parentNode.removeChild(alert);
          }
        }, 5000);
      }
    </script>
  </body>
</html>
