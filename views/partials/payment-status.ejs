<!-- Payment Status Indicator Component -->
<div class="payment-status-indicator">
  <div class="status-badge status-<%= status.toLowerCase().replace('_', '-') %>">
    <% if (status === 'INITIATED') { %>
    <i class="fas fa-clock"></i>
    <span>Payment Initiated</span>
    <% } else if (status === 'PENDING') { %>
    <i class="fas fa-hourglass-half"></i>
    <span>Payment Pending</span>
    <% } else if (status === 'SUCCESS') { %>
    <i class="fas fa-check-circle"></i>
    <span>Payment Successful</span>
    <% } else if (status === 'FAILED') { %>
    <i class="fas fa-times-circle"></i>
    <span>Payment Failed</span>
    <% } else if (status === 'CANCELLED') { %>
    <i class="fas fa-ban"></i>
    <span>Payment Cancelled</span>
    <% } else if (status === 'REFUNDED') { %>
    <i class="fas fa-undo"></i>
    <span>Payment Refunded</span>
    <% } else { %>
    <i class="fas fa-question-circle"></i>
    <span>Unknown Status</span>
    <% } %>
  </div>

  <% if (showDetails) { %>
  <div class="status-details">
    <div class="detail-item">
      <span class="label">Transaction ID:</span>
      <span class="value"><%= transactionId || 'N/A' %></span>
    </div>

    <% if (gatewayPaymentId) { %>
    <div class="detail-item">
      <span class="label">Gateway Payment ID:</span>
      <span class="value"><%= gatewayPaymentId %></span>
    </div>
    <% } %> <% if (amount) { %>
    <div class="detail-item">
      <span class="label">Amount:</span>
      <span class="value">₹<%= amount.toLocaleString('en-IN') %></span>
    </div>
    <% } %> <% if (paymentMethod) { %>
    <div class="detail-item">
      <span class="label">Payment Method:</span>
      <span class="value"><%= paymentMethod %></span>
    </div>
    <% } %> <% if (gatewayName) { %>
    <div class="detail-item">
      <span class="label">Gateway:</span>
      <span class="value"><%= gatewayName %></span>
    </div>
    <% } %> <% if (createdAt) { %>
    <div class="detail-item">
      <span class="label">Date & Time:</span>
      <span class="value"><%= new Date(createdAt).toLocaleString('en-IN') %></span>
    </div>
    <% } %> <% if (failureReason && status === 'FAILED') { %>
    <div class="detail-item">
      <span class="label">Failure Reason:</span>
      <span class="value error-text"><%= failureReason %></span>
    </div>
    <% } %> <% if (refundAmount && status === 'REFUNDED') { %>
    <div class="detail-item">
      <span class="label">Refund Amount:</span>
      <span class="value">₹<%= refundAmount.toLocaleString('en-IN') %></span>
    </div>
    <% } %>
  </div>
  <% } %> <% if (showActions && (status === 'FAILED' || status === 'CANCELLED')) { %>
  <div class="status-actions">
    <button
      class="btn btn-sm btn-primary retry-payment"
      data-transaction-id="<%= transactionId %>"
      data-amount="<%= amount %>"
    >
      <i class="fas fa-redo"></i> Retry Payment
    </button>
  </div>
  <% } %> <% if (showActions && status === 'SUCCESS' && allowRefund) { %>
  <div class="status-actions">
    <button
      class="btn btn-sm btn-outline-warning initiate-refund"
      data-transaction-id="<%= transactionId %>"
      data-amount="<%= amount %>"
    >
      <i class="fas fa-undo"></i> Request Refund
    </button>
  </div>
  <% } %>
</div>

<style>
  .payment-status-indicator {
    background: white;
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    margin-bottom: 15px;
  }

  .status-badge {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    padding: 8px 16px;
    border-radius: 20px;
    font-weight: 600;
    font-size: 14px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .status-initiated {
    background: #fff3cd;
    color: #856404;
    border: 1px solid #ffeaa7;
  }

  .status-pending {
    background: #d1ecf1;
    color: #0c5460;
    border: 1px solid #bee5eb;
  }

  .status-success {
    background: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }

  .status-failed {
    background: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }

  .status-cancelled {
    background: #e2e3e5;
    color: #383d41;
    border: 1px solid #d6d8db;
  }

  .status-refunded {
    background: #d1ecf1;
    color: #0c5460;
    border: 1px solid #bee5eb;
  }

  .status-details {
    margin-top: 15px;
    padding-top: 15px;
    border-top: 1px solid #e9ecef;
  }

  .detail-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 6px 0;
    border-bottom: 1px solid #f8f9fa;
  }

  .detail-item:last-child {
    border-bottom: none;
  }

  .detail-item .label {
    font-weight: 600;
    color: #6c757d;
    font-size: 14px;
  }

  .detail-item .value {
    color: #333;
    font-size: 14px;
    text-align: right;
  }

  .error-text {
    color: #dc3545 !important;
    font-weight: 500;
  }

  .status-actions {
    margin-top: 15px;
    padding-top: 15px;
    border-top: 1px solid #e9ecef;
    text-align: right;
  }

  .btn {
    border: none;
    border-radius: 4px;
    padding: 6px 12px;
    font-size: 12px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 4px;
  }

  .btn-sm {
    padding: 4px 8px;
    font-size: 11px;
  }

  .btn-primary {
    background: #667eea;
    color: white;
  }

  .btn-primary:hover {
    background: #5a6fd8;
    transform: translateY(-1px);
  }

  .btn-outline-warning {
    background: transparent;
    border: 1px solid #ffc107;
    color: #ffc107;
  }

  .btn-outline-warning:hover {
    background: #ffc107;
    color: #212529;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .detail-item {
      flex-direction: column;
      align-items: flex-start;
      gap: 4px;
    }

    .detail-item .value {
      text-align: left;
    }

    .status-actions {
      text-align: center;
    }
  }

  /* Animation for status changes */
  .status-badge {
    animation: statusFadeIn 0.5s ease-in-out;
  }

  @keyframes statusFadeIn {
    from {
      opacity: 0;
      transform: scale(0.95);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  /* Pulse animation for pending/initiated statuses */
  .status-initiated .fas,
  .status-pending .fas {
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
    100% {
      opacity: 1;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Handle retry payment button
    document.querySelectorAll('.retry-payment').forEach(button => {
      button.addEventListener('click', function () {
        const transactionId = this.dataset.transactionId;
        const amount = this.dataset.amount;

        if (confirm('Do you want to retry this payment?')) {
          // Redirect to payment form with pre-filled data
          window.location.href = `/fees/payment/retry/${transactionId}`;
        }
      });
    });

    // Handle refund request button
    document.querySelectorAll('.initiate-refund').forEach(button => {
      button.addEventListener('click', function () {
        const transactionId = this.dataset.transactionId;
        const amount = this.dataset.amount;

        const reason = prompt('Please provide a reason for the refund:');
        if (reason && reason.trim()) {
          if (
            confirm(
              `Are you sure you want to request a refund of ₹${parseInt(amount).toLocaleString('en-IN')}?`
            )
          ) {
            initiateRefund(transactionId, amount, reason.trim());
          }
        }
      });
    });
  });

  function initiateRefund(transactionId, amount, reason) {
    // Show loading state
    const button = document.querySelector(
      `[data-transaction-id="${transactionId}"].initiate-refund`
    );
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
    button.disabled = true;

    fetch('/api/fees/payment/refund', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        transaction_id: transactionId,
        refund_amount: amount,
        reason: reason,
        refund_type: 'FULL'
      })
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          alert('Refund request has been initiated successfully.');
          location.reload();
        } else {
          alert('Refund request failed: ' + (data.message || 'Unknown error'));
          button.innerHTML = originalText;
          button.disabled = false;
        }
      })
      .catch(error => {
        console.error('Refund error:', error);
        alert('Refund request failed. Please try again.');
        button.innerHTML = originalText;
        button.disabled = false;
      });
  }

  // Auto-refresh for pending payments
  function autoRefreshPendingPayments() {
    const pendingStatuses = document.querySelectorAll('.status-pending, .status-initiated');

    if (pendingStatuses.length > 0) {
      setTimeout(() => {
        location.reload();
      }, 30000); // Refresh every 30 seconds for pending payments
    }
  }

  // Initialize auto-refresh if there are pending payments
  autoRefreshPendingPayments();
</script>
