<!-- System Health Status Page -->
<div class="min-h-screen bg-gray-50" x-data="systemHealth()" x-init="loadHealthData()">
    <!-- Header Section -->
    <div class="bg-white border-b border-gray-200 shadow-sm">
        <div class="px-4 sm:px-6 lg:px-8 py-6">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-3xl font-bold text-gray-900">System Health Status</h1>
                    <p class="mt-2 text-sm text-gray-600">Real-time monitoring of School ERP system components</p>
                </div>
                <div class="flex items-center space-x-4">
                    <button @click="loadHealthData()" 
                            class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                        <svg class="w-4 h-4 mr-2" :class="{'animate-spin': loading}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                        </svg>
                        Refresh
                    </button>
                    <div class="text-sm text-gray-500">
                        Last updated: <span x-text="lastUpdated"></span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Status Cards -->
    <div class="px-4 sm:px-6 lg:px-8 py-8">
        <!-- Overall Status -->
        <div class="mb-8">
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center">
                    <div class="p-3 rounded-full" 
                         :class="healthStatus.overall === 'healthy' ? 'bg-green-100' : 'bg-red-100'">
                        <svg class="w-8 h-8" 
                             :class="healthStatus.overall === 'healthy' ? 'text-green-600' : 'text-red-600'" 
                             fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path x-show="healthStatus.overall === 'healthy'" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            <path x-show="healthStatus.overall !== 'healthy'" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                    </div>
                    <div class="ml-4">
                        <h2 class="text-2xl font-semibold" 
                            :class="healthStatus.overall === 'healthy' ? 'text-green-600' : 'text-red-600'"
                            x-text="healthStatus.overall === 'healthy' ? 'System Healthy' : 'System Issues Detected'"></h2>
                        <p class="text-gray-600" x-text="healthStatus.message"></p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Component Status Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
            <!-- Database Status -->
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-medium text-gray-900">Database</h3>
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium"
                          :class="healthStatus.database ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'">
                        <span x-text="healthStatus.database ? 'Connected' : 'Disconnected'"></span>
                    </span>
                </div>
                <div class="text-sm text-gray-600">
                    <p>Status: <span :class="healthStatus.database ? 'text-green-600' : 'text-red-600'" 
                                    x-text="healthStatus.database ? 'Online' : 'Offline'"></span></p>
                    <p>Response Time: <span x-text="healthStatus.dbResponseTime || 'N/A'"></span></p>
                </div>
            </div>

            <!-- Session Store -->
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-medium text-gray-900">Session Store</h3>
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium"
                          :class="healthStatus.sessionStore ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'">
                        <span x-text="healthStatus.sessionStore ? 'Active' : 'Inactive'"></span>
                    </span>
                </div>
                <div class="text-sm text-gray-600">
                    <p>Status: <span :class="healthStatus.sessionStore ? 'text-green-600' : 'text-red-600'" 
                                    x-text="healthStatus.sessionStore ? 'Working' : 'Error'"></span></p>
                    <p>Type: MySQL Session Store</p>
                </div>
            </div>

            <!-- API Endpoints -->
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-medium text-gray-900">API Endpoints</h3>
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium"
                          :class="healthStatus.apiEndpoints ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'">
                        <span x-text="healthStatus.apiEndpoints ? 'Responding' : 'Error'"></span>
                    </span>
                </div>
                <div class="text-sm text-gray-600">
                    <p>Status: <span :class="healthStatus.apiEndpoints ? 'text-green-600' : 'text-red-600'" 
                                    x-text="healthStatus.apiEndpoints ? 'All OK' : 'Issues'"></span></p>
                    <p>Response Time: <span x-text="healthStatus.apiResponseTime || 'N/A'"></span></p>
                </div>
            </div>
        </div>

        <!-- System Information -->
        <div class="bg-white rounded-lg shadow">
            <div class="px-6 py-4 border-b border-gray-200">
                <h3 class="text-lg font-medium text-gray-900">System Information</h3>
            </div>
            <div class="px-6 py-4">
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                    <div>
                        <dt class="text-sm font-medium text-gray-500">Environment</dt>
                        <dd class="mt-1 text-sm text-gray-900" x-text="systemInfo.environment || 'Development'"></dd>
                    </div>
                    <div>
                        <dt class="text-sm font-medium text-gray-500">Version</dt>
                        <dd class="mt-1 text-sm text-gray-900" x-text="systemInfo.version || '2.0.0'"></dd>
                    </div>
                    <div>
                        <dt class="text-sm font-medium text-gray-500">Uptime</dt>
                        <dd class="mt-1 text-sm text-gray-900" x-text="systemInfo.uptime || 'N/A'"></dd>
                    </div>
                    <div>
                        <dt class="text-sm font-medium text-gray-500">Node Version</dt>
                        <dd class="mt-1 text-sm text-gray-900" x-text="systemInfo.nodeVersion || process.version"></dd>
                    </div>
                </div>
            </div>
        </div>

        <!-- Actions -->
        <div class="mt-8 flex justify-between items-center">
            <div>
                <a href="/admin/system" 
                   class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                    </svg>
                    Back to Dashboard
                </a>
            </div>
            <div class="text-sm text-gray-500">
                Auto-refresh: <span x-text="autoRefresh ? 'On' : 'Off'"></span>
                <button @click="toggleAutoRefresh()" 
                        class="ml-2 text-blue-600 hover:text-blue-500">
                    <span x-text="autoRefresh ? 'Disable' : 'Enable'"></span>
                </button>
            </div>
        </div>
    </div>

    <!-- Loading Overlay -->
    <div x-show="loading && !healthStatus.overall" class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg p-6 flex items-center space-x-4">
            <div class="spinner"></div>
            <span class="text-gray-900">Loading system health data...</span>
        </div>
    </div>
</div>

<script>
function systemHealth() {
    return {
        loading: false,
        autoRefresh: false,
        refreshInterval: null,
        lastUpdated: new Date().toLocaleTimeString(),
        healthStatus: {
            overall: null,
            message: 'Loading system status...',
            database: null,
            sessionStore: null,
            apiEndpoints: null,
            dbResponseTime: null,
            apiResponseTime: null
        },
        systemInfo: {
            environment: 'Development',
            version: '2.0.0',
            uptime: null,
            nodeVersion: null
        },

        async loadHealthData() {
            this.loading = true;
            try {
                const response = await fetch('/api/v1/admin/system/health');
                if (response.ok) {
                    const data = await response.json();
                    this.healthStatus = {
                        overall: 'healthy',
                        message: 'All systems are operational',
                        database: true,
                        sessionStore: true,
                        apiEndpoints: true,
                        dbResponseTime: '< 50ms',
                        apiResponseTime: '< 100ms'
                    };
                    this.systemInfo = data.systemInfo || this.systemInfo;
                } else {
                    this.healthStatus = {
                        overall: 'unhealthy',
                        message: 'System health check failed',
                        database: false,
                        sessionStore: false,
                        apiEndpoints: false,
                        dbResponseTime: 'Timeout',
                        apiResponseTime: 'Timeout'
                    };
                }
            } catch (error) {
                console.error('Health check failed:', error);
                this.healthStatus = {
                    overall: 'unhealthy',
                    message: 'Unable to connect to system services',
                    database: false,
                    sessionStore: false,
                    apiEndpoints: false,
                    dbResponseTime: 'Error',
                    apiResponseTime: 'Error'
                };
            } finally {
                this.loading = false;
                this.lastUpdated = new Date().toLocaleTimeString();
            }
        },

        toggleAutoRefresh() {
            this.autoRefresh = !this.autoRefresh;
            if (this.autoRefresh) {
                this.refreshInterval = setInterval(() => {
                    this.loadHealthData();
                }, 30000); // Refresh every 30 seconds
            } else {
                clearInterval(this.refreshInterval);
            }
        }
    };
}
</script>